pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub')
        DOCKER_IMAGE = 'vineetsethi1/my-app'
        DOCKER_TAG = "${BUILD_NUMBER}"
        SSH_CREDENTIALS = 'target-vm'
    }

    stages {
        stage('Checkout Repo') {
            steps {
                git credentialsId: 'id_rsa',
                    url: 'git@github.com:VinSethi/node-sparta-test-app.git',
                    branch: 'main' // Replace with your actual branch if different
            }
        }

        stage('Check Git Repo and Files') {
            steps {
                sh '''
                    echo "‚úÖ Current Directory:"
                    pwd

                    echo "üìÅ Listing files in workspace:"
                    ls -al

                    echo "üîç Verifying Git remote:"
                    git remote -v || echo "No Git repo found in current workspace"
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    env.IMAGE_TAG = "${DOCKER_IMAGE}:${DOCKER_TAG}"
                }
                sh """
                    docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                    docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest
                """
            }
        }

        stage('Push to DockerHub') {
            steps {
                sh """
                    echo ${DOCKERHUB_CREDENTIALS_PSW} | docker login -u ${DOCKERHUB_CREDENTIALS_USR} --password-stdin
                    docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                    docker push ${DOCKER_IMAGE}:latest
                """
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                sshagent([env.SSH_CREDENTIALS]) {
                    script {
                        def imageTag = env.IMAGE_TAG
                        sh('''
    ssh -o StrictHostKeyChecking=no ubuntu@172.31.58.118 << EOF
export KUBECONFIG=/home/ubuntu/.kube/config
echo "Setting image in deployment..."
kubectl set image deployment/sparta-app sparta-app=${imageTag} --record
echo "Deployment updated"
EOF
''')
                    }
                }
            }
        }
    }
}
